You are given an array arr of positive integers. You are also given some queries where queries[i] = [lefti, righti].

For each queryi compute the XOR of elements of the array arr from index lefti to righti (arr[lefti] XOR arr[lefti + 1] XOR ... XOR arr[righti]).

Return an array answer where answer[i] is the answer to the ith query.

Input Format
The first line of contains two positive integers N and Q, denoting the number of elements in the arr and the number of queries respectively.

The second line contains N space-separated integers depicting the values of an array.

The next Q lines contain two positive integers lefti and righti as described in the problem statement.

Output Format
Print the required array.

Example 1
Input

4 4
1 3 4 8
0 1
1 2
0 3
3 3
Output

2 7 14 8 
Explanation

The binary representation of the elements in the array are:

1 = 0001

3 = 0011

4 = 0100

8 = 1000

The XOR values for queries are:

[0,1] = 1 xor 3 = 2

[1,2] = 3 xor 4 = 7

[0,3] = 1 xor 3 xor 4 xor 8 = 14

[3,3] = 8

Example 2
Input

4 4
4 8 2 10
2 3
1 3
0 0
0 3
Output

8 0 4 4 
Explanation

Find the binary representation of elements, and find the xor of ranges.

Constraints
1 <= N, Q <= 3 * 10^4

1 <= arr[i] <= 10^9

queries[i].length == 2

0 <= lefti <= righti < arr.length
---------------------------------------------------------------------
---------------------------------------------------------------------
import java.util.*;
import java.lang.*;
import java.io.*;

public class Main {
	  public static void main(String[] args) throws Throwable {
		  Scanner sc = new Scanner(System.in);
	        int n = sc.nextInt();
	        int q = sc.nextInt();
	        int [] arr= new int[n];
	        for(int i=0;i<n;i++){
	            arr[i]=sc.nextInt();
	        }
	        int [][] queries= new int[q][2];
	        for(int i=0;i<q;i++){
	            for(int j=0;j<2;j++){
	                queries[i][j]=sc.nextInt();
	            }
	        }
	        Solution Obj= new Solution();
	        
	        int[] result = Obj.xorQueries(arr,queries);
	        for(int i=0;i<result.length;i++){
	            System.out.print(result[i]+" ");
	    }
}
static class Solution{
  
	 public static int[] xorQueries(int[] A, int[][] queries) {
	       // your code goes here
         int n = A.length;
         int[] pref = new int[n];
         int xr = 0;
         for(int i = 0;i<n;i++)
             {
                 xr = xr^A[i];
                 pref[i] = xr;
             }
         int q = queries.length;
         int[] ans = new int[q];
         for(int i=0;i<q;i++)
             {
                 int l = queries[i][0];
                 int r = queries[i][1];
                 if(l == 0)
                 {
                     ans[i] = pref[r];
                 }
                 else
                 {
                      ans[i] = pref[r]^pref[l-1];
                 }
             }         
         return ans;
	    }   
}
}
