You are a given a root node of partially constructed BST. You are also given a value target , your task is to print all the nodes that add up to form the target value.Make sure all pairs print the smaller value first and avoid duplicacies and also print the pairs in increasing order.

Input Format
The first line of input contains a number n, representing the number of nodes.

The second line of input contains an integer array representing the nodes.

The third line of input contains a single integer target.

Output Format
You need to print all the nodes that adds up to form the target value.

Example 1
Input

3
2 1 3
4
Output

1 3
Explanation


        2
       / \
      1   3
The sum that adds to be 4 is 1 and 3.
Example 2
Input

5
2 4 15 6 3
100
Output

-1
Explanation

    2
     \
      4
     /  \
    3   15
        /
        6
No nodes add up to form sum 100, so we print -1.
Constraints
1 <= N <= 1000

1 <= value of each node <= 104

1 <= target <= 106

Topics
Recursion
BST
-----------------------------------------------------
----------------------------------------------------
import java.util.*;

class Node {
    int data;
    Node left, right;

    public Node(int item) {
        data = item;
        left = right = null;
    }
}

class BinarySearchTree {
    Node constructBST(int[] arr, int start, int end, Node root) {
        if (start > end)
            return null;
        int mid = (start + end) / 2;

        if (root == null)
            root = new Node(arr[mid]);

        root.left = constructBST(arr, start, mid - 1, root.left);
        root.right = constructBST(arr, mid + 1, end, root.right);

        return root;

    }
}

public class Main {
    public static void main(String[] args) throws Throwable {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int arr[] = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }
        int target = sc.nextInt();

        Arrays.sort(arr);
        Node root = null;
        BinarySearchTree bst = new BinarySearchTree();
        root = bst.constructBST(arr, 0, n - 1, root);

        Accio A = new Accio();
        A.targetSum(root, target);

        sc.close();
    }
}

class Accio {
    
    boolean found = false;
    boolean find(Node root,int comp)
    {
        if(root == null)
            return false;
        if(root.data == comp)
            return true;
        if(root.data>comp){
            return find(root.left,comp);
        }
        else{
            return find(root.right,comp);
        }
    }
    public void printpairs(Node root,int target,Node toproot)
    {
        if(root == null)
            return;
        printpairs(root.left,target,toproot);
        int cur = root.data;
        int comp = target - cur;
        if(comp>cur)
        {
            boolean compfound = find(toproot,comp);
            if(compfound)
            {
                found = true;
                System.out.println(root.data+" "+comp);
            }
        }
        printpairs(root.right,target,toproot);
    }
    public void targetSum(Node root, int tar)
    {
        // your code here
        printpairs(root,tar,root);
        if(found == false)
            System.out.println(-1);
    }

}
